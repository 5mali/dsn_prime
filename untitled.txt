
F - milestone achievement: ENO is achieved when battery is reset to BOPT everyday for Tokyo 2009
F -> F1 - violation penalty increased to -3
F1 -> F2 - train using Tokyo, Minamidaito, Wakkanai for all years 2005-2015
F2 -> F3 - target update at 18 months
F3 -> F4 - battery is reset ONLY when limits are reached
F4 -> F5 - no battery reset at all

G - train using only Tokyo [2000-2015], battery is reset to BOPT everyday
F2 -> G -  target update = 18 months, 
G -> G1 - target update = 1 month
G -> G2 - target update = 6 month
G -> G3 - target update = 12 month

F4 -> H - train using only Tokyo [2000-2015], battery is reset ONLY when limits are reached, target update = 18 months, 
H -> H1 - target update = 1 month
H -> H2 - target update = 6 months
H -> H3 - target update = 12 months
H -> H4 - target update = 1 week
#target update doesn't make any drastic difference



F1 -> I - train using only Tokyo 2009, battery is reset ONLY when limits are reached, target update = 18 months
I -> I1 - target update = 1 month
I -> I2 - target update = 6 months
I -> I3 -  target update = 12 months
I -> I4 - target update = 1 week
#target update doesn't make any drastic difference
#1 week seems a bit unstable


I -> J - train using only Tokyo 2009, battery is never reset, target update = 18 months
J -> J1 - target update = 1 month
J -> J2 - target update = 6 month
J -> J3 - target update = 12 month
J -> J4 - target update = 1 week
J -> J5 - target update = 2 years
#1 week is unstable
#18 months seems most stable
# violation instances need to be identified and punished severely

J -> K - change reward function to identify and punish violation instances
# network cannot seem to pre-decrease battery level in anticipation of a sunny day
K:        LR=0.001, HIDDEN_LAYER=20, WIDTH = 1
K -> K1 - LR=0.01,  HIDDEN_LAYER=20, WIDTH = 1 #unstable. Not Recommended
K -> K2 - LR=0.001, HIDDEN_LAYER=50, WIDTH = 1  
K -> K3 - LR=0.001, HIDDEN_LAYER=20, WIDTH = 2 
K -> K4 - LR=0.001, HIDDEN_LAYER=100, WIDTH = 1

#K2 seems to have better performance compared to K, may require longer training
#K3 has worse performance compared to K but promises to be smarter.
#K4 has even worse performance compared to K but maybe due to lack of training

K2 [50 iterations]: LR=0.001, HIDDEN_LAYER=50, WIDTH = 1
K3 [50 iterations]: LR=0.001, HIDDEN_LAYER=20, WIDTH = 2
K4 [50 iterations]: LR=0.001, HIDDEN_LAYER=100, WIDTH = 1

K3 seems to perform best

K -> K_small - SMAX = 500, senergy is not mulitplied by 2 #to check if the given environment is impossible to solve

K_small is pretty successful in learning when battery is reset whenever is violated
IMPORTANT: EPSILON = 0.9 causes a significant amount of battery violations. So, separate greedy validation is required.




Fx -> increase width
Fx -> increase depth
Fx -> no reward broadcast

